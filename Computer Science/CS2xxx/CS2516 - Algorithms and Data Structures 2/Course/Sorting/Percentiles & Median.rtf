{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Percentiles / Median\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To find the median/percentile of an unsorted list, you can use sorting techniques.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Method 1\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Method 2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 for each element in list:\line
    add element to a sorted linked list\line
step through linked list to position k\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Worst case is for a sorted list, which gives O(n^2) additions followed by k steps.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Method 3\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Sort algorithm\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Read position\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 O(n log n) for merge or heap sort. O(n^2) for quick sort, but O(n log n) on average.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Method 4\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab apply quicksort idea to identify element in position k\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab called decrease and conquer\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pick a pivot\line
sweep through list to gather all items less than, equal to, or greater than pivot\line
if more items 'less than pivot' than k\line
    recurse on all items less than pivot\line
else if more items 'less than or equal to pivot' than k\line
    return pivot\line
else\line
    recurse on all items greater than pivot\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Analysis\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Worst case - always choose a pivot that only decreases the list by 1 item. This is O(n^2) for small k.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By a similar argument to quicksort, you can show that the average time for a list of length n is O(n).\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab There is an algorithm called median of medians to guarantee O(n) runtime, but it requires handling of very large coefficients.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Exercise\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See notes. Developing and testing multiple versions of quickselect. Which is fastest on average?\par}
}
