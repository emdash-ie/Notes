{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Timsort\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Specifically designed for Python by Tim Peters in 2002.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab It's a hybrid of mergesort and insertion sort, designed to perform well when the data is already partially sorted.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab It's stable.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Timsort:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab finds 'runs' \u8211- sequences of items already in order\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab merges runs together\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab runs of short length are combined with larger ones using insertion sort, but this is too complex and too detailed to present in this module\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Its worst-case complexity is O(n log n), its best case is O(n), and it is believed to be faster than quicksort in most cases.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is now also the default sorting algorithm in Java and in Android.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The original description is {\field{\*\fldinst{HYPERLINK "https://svn.python.org/projects/python/trunk/Objects/listsort.txt"}}{\fldrslt{\ul
here
}}}
.\par}
}
