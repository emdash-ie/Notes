{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Djikstra's Algorithm\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab once you've found a path, you keep going until you've found the cheapest path\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab this is when you try to expand from your target vertex (because you're always expanding from the cheapest current vertex)\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab This will be the final continuous assessment\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 heap vs. unsorted\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab if the graph is dense, m is O(n^2)\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab if the graph is sparse, m is O(n)\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Spanning Trees & Prim's Algorithm\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab spanning tree is a subgraph of G that is a tree and contains every vertex\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab minimum spanning tree is a spanning tree which has the lowest sum of weights of the selected edges\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Prim's Algorithm\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab repeatedly include the minimum-weight edge from a vertex that's in the tree to a new vertex\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Complexity\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Proof\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab for any algorithm you write, you should be able to prove that it does what you claim\sa180\par}
}
