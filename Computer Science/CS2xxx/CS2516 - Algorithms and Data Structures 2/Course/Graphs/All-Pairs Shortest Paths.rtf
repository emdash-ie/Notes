{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 All-Pairs Shortest Paths\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab can create a lookup structure in advance to process later\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab that structure tells us the weight of the shortest path between any two vertices\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab doesn't tell us which path ## First Attempt\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 for each vertex v in the graph\line
    compute the shortest path from v to all vertices using Dijkstra\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 \u160?Second Attempt\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab adapt floyd-warshall algorithm for finding the transitive closure\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 create nxn 2d array\line
put 0 in all the diagonals\line
for each vertex v1\line
    for each other vertex v2\line
        if the cost of reaching v2 from v1 through the allowed vertices (starts at the empty set) is lower than the cost currently in the graph, put the new cost in\line
add a vertex to the allowed vertices and repeat\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 \u160?Complexity\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is O(n^2 + n^2 + n^3) = O(n^3).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is better than Dijkstra-heap with a dense graph (and same as Dijkstra-list, but tends to be faster).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the graph is sparse, this is higher complexity than repeated Dijkstra-heap.\par}
}
