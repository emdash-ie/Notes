{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Labs\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Labs start next Thursday (the 23rd February) and last for five weeks. We'll be divided into two groups, 15:00\u8211-16:30 and 16:30\u8211-18:00. You can swap from your assigned group into the other group permanently if there's space \u8211- notify the demonstrators.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab No networking lectures next week.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Network Programming Using the Socket API\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The Socket API has been around since the 80s, and hasn't evolved a lot since then. It's used everywhere.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The socket is between the application layer and the transport layer. Generally everything from the socket down exists in the kernel space, and everything above exists in the user space.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Two popular transport services available via the socket API:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab TCP\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab UDP\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Server has a socket through which it receives and sends. Each client also needs a socket.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Sockets are bound to port numbers \u8211- the client needs to know the address of the server and also the port number of the server's socket.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Example Application\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Client reads a line of characters from its keyboard and sends the data to a server\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Server converts it to uppercase and sends it back [\u8230?]\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Socket Programming with UDP\par}
{\pard \ql \f0 \sa180 \li0 \fi0 [\u8230?]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Socket Programming with TCP\par}
{\pard \ql \f0 \sa180 \li0 \fi0 [\u8230?]\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab server creates a new socket for each client\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab want to use parallelism to deal with multiple clients at once\sa180\par}
}
