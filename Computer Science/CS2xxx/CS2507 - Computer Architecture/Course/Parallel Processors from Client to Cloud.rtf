{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Intro\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Goal: connecting multiple computers to get higher performance\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab multiprocessors\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab scalability, availability, power efficiency\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab power efficiency is the most compelling reason for multiprocessing\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Task-level (process-level) parallelism:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab high throughput for independent jobs\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 parallel processing program:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab single program run on multiple processors\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 multicore microprocessors\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab chips with multiple cores/processors\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Hardware and Software Classification\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Hardware:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Serial (pentium 4) and parallel (e.g. intel core i7).\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Software:\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab sequential, e.g. matrix multiplication\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab concurrent, e.g. operating system\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Sequential/concurrent software can run on serial/parallel hardware.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The challenge is making effective use of parallel hardware.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Message Passing Multiprocessors\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab each processor has a private physical address space\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab hardware sends/receives messages between processors\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Loosely Coupled Clusters\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab network of independent computers\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab each has its own private memory and OS\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab two level of connection\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab connected using I/O system\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab e.g. ethernet/switch, internet\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab suitable for applications with independent tasks\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab web servers, databases, simulations\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab high availability, scalable, affordable\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab problems:\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab high administration cost (prefer virtual machines)\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab low interconnect bandwidth\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab compare processor/memory bandwidth on an SMP (single-memory processor?)\sa180\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Grid Computing\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab separate computers interconnected by long-haul networks\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab e.g. internet connections\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab work units farmed out, results sent back\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab can make use of idle time on PCs\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab e.g. SETI@home, World Community Grid\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab Over 5 million computer users in more than 200 countries\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 \u160?Cloud Computing\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab a new class of network based computing that takes place over the internet\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab basically storing, processing, and accessing data over the internet\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab uses a collection/group of integrated and networked hardware, software, and internet infrastructure (called a platform)\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab these platforms hide the complexity and details of the underlying infrastructure from users and applications by providing a very simple graphical interface or API\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab in addition, the platform provides on-demand services that are always on, anywhere, anytime, anyplace\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 \u160?Cloud Deployment Models\par}
{\pard \ql \f0 \sa180 \li0 \fi0 4 basic models:\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab private cloud\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab public cloud\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab companies worried about sensitive data\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab hybrid cloud\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab keep private cloud, use public for less sensitive data\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab community cloud\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Interconnection Networks\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Network topologies \u8211- arrangements of processors, switches, and links:\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab bus\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab flat communication\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab ring\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab uses switches to provide higher bandwidth capacity than the bus\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab 2D mesh\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab N-cube\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab fully-connected\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab too expensive\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab also difficult to alter\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Network Characteristics\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab performance\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab latency per message (unloaded network)\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab throughput\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab link bandwidth\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab total network bandwidth\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab bisection bandwidth\sa180\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab congestion delays (depending on traffic)\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab cost\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab power\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab routability in silicon\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Parallel Benchmarks\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab traditional benchmarks use fixed code and data sets\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab linpack \u8211- matrix linear algebra\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab performance/latency (world's fastest computer)\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab SPECrate \u8211- parallel run of SPEC CPU programs\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab determines throughput performance\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab job-level parallelism\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab SPLASH: Stanford Parallel Applications for Shared Memory\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab mix of kernels and applications, strong scaling\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab mainly looks at throughput\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab NAS (NASA Advance Supercomputing) suite\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab computational fluid dynamics kernels, weak scaling\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab weak scaling as in not focused on scaling (or something)\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab focuses on latency, like linpack\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab PARSEC (Princeton Application Repository for Shared Memory Computers)\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab multithreaded applications using Pthreads and OpenMP\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab throughput and latency\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 \u160?Modelling Performance\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab architectural diversity \u8211- multithreading, SIMD, GPUs\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab need for simple performance model for all architecture types\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab parallel computers peak floating-point performance\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab depends on kernel speed on a given computer\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab arithmetic intensity \u8211- a ratio of floating-point operations per byte of memory accessed by a program\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab memory system demand\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab stream benchmark provides peak memory performance\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Roofline Diagram\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Ties together the peak FP performance, the arithmetic intensity, and the peak memory performance.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Defines an upper bound to performance\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Optimising Performance\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Optimise FP performance:\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab balance adds & multiplications\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab improve superscalar ILP and use of SIMD instructions\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab loop unrolling\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Optimise memory usage by reducing bottlenecks:\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab software prefetch\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab avoid load stalls\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab memory affinity\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab allocate thread and data on the same processor\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab avoid non-local data accesses\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab choice of optimisation depends on arithmetic intensity of code\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab arithmetic intensity is not always fixed\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab may scale with problem size\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab caching reduces memory accesses\par}
{\pard \ql \f0 \sa0 \li1440 \fi-360 \endash \tx360\tab increases arithmetic intensity\sa180\sa180\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Fallacies\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab peak performance tracks observed performance\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab marketers like this approach\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab in multiprocessor, they simply multiply\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab need to be aware of bottlenecks that limit performance\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Amdahl's law doesn't apply to parallel computers\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab since we can achieve linear speedup\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab but only on applications with weak scaling\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Pitfalls\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab not developing the software to take account of a multiprocessor architecture\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab example: using a single lock for a shared composite resource\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab serialises accesses, even if they could be done in parallel\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab Silicon Graphic Operating System\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab a possible solution: use finer-granularity locking\sa180\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 \u160?Conclusion\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab goal of multiprocessors is to achieve higher performance by using multiple processors\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab difficulties:\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab developing parallel software\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab devising appropriate architectures\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab SaaS (software as a service) importance is growing and clusters are a good match\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab performance per dollar and performance per joule drive both mobile and warehouse-scale computing (WSC)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab SIMD and vector operations match multimedia applications and are easy to program\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab for x86 we expect:\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab two cores per chip every two years\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab double SIMD width every four years\sa180\sa180\sa180\par}
}
