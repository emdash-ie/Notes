{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \f1 public class PIC /* FILL IN #1 */ \{\line
    private String[] things;\line
    public PIC(String[] things) \{\line
        this.things = things;\line
    \}\line
    /* FILL IN #2 */\line
\}\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab need to fill in this code in the question\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab the only purpose of the class is to iterate over the attribute {\f1 things}\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab provide the code to complete it\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 public class PIC implements Iterable<String> \{\line
    private String[] things;\line
    public PIC(String[] things) \{\line
        this.things = things;\line
    \}\line
    /* FILL IN #2 */\line
\}\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab have implemented Iterable, now need to provide an Iterator\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab iterator holds the state for iterating over and provides the {\f1 next()} and {\f1 hasNext()} methods\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 \endash \tx360\tab can either use an inner class or an anonymous class (anonymous class is slightly easier)\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 public class PIC implements Iterable<String> \{\line
    private String[] things;\line
    public PIC(String[] things) \{\line
        this.things = things;\line
    \}\line
\line
    @Override\line
    public Iterator<String> iterator() \{\line
        return new Iterator<String>() \{\line
            // visibility modifier doesn't matter because you can't access the attribute anyway    \line
            private int position = 0;\line
\line
            @Override\line
            public boolean hasNext() \{\line
                return position < things.length;\line
            \}\line
\line
            @Override\line
            public int getNext() \{\line
                return things[position++];\line
            \}\line
        \};\line
    \}\line
\}\par}
}
